use_default_settings: false

general:
  debug: false              # Debug mode, only for development
  instance_name: "Frea Search"  # displayed name
  privacypolicy_url: false  # https://example.com/privacy
  contact_url: false        # mailto:contact@example.com
  enable_metrics: false      # record stats
  donation_url: https://donate.freasearch.org

brand:
  new_issue_url: https://git.freasearch.org/frea/search/-/issues/new
  docs_url: https://docs.freasearch.org/
  public_instances: https://freasearch.org/
  wiki_url: https://docs.freasearch.org/
  issue_url: https://git.freasearch.org/frea/search/-/issues


search:
  # Filter results. 0: None, 1: Moderate, 2: Strict
  safe_search: 1
  # Existing autocomplete backends: "dbpedia", "duckduckgo", "google",
  # "seznam", "startpage", "swisscows", "qwant", "wikipedia" - leave blank to turn it off
  # by default.
  autocomplete: "wikipedia"
  # minimun characters to type before autocompleter starts
  autocomplete_min: 4
  # Default search language - leave blank to detect from browser information or
  # use codes from 'languages.py'
  default_lang: ""
  # Available languages
  # languages:
  #   - all
  #   - en
  #   - en-US
  #   - de
  #   - it-IT
  #   - fr
  #   - fr-BE
  # ban time in seconds after engine errors
  ban_time_on_fail: 5
  # max ban time in seconds after engine errors
  max_ban_time_on_fail: 120
  # remove format to deny access, use lower case.
  # formats: [html, csv, json, rss]
  formats:
    - html
    - json

server:
  # If you change port, bind_address or base_url don't forget to rebuild
  # instance's environment (make buildenv)
  port: 8888
  bind_address: "127.0.0.1"
  base_url: false  # Possible values: false or "https://example.org/location".
  limiter: false  # rate limit the number of request on the instance, block some bots
  use_turnstile: false

  # If your instance owns a /etc/searxng/settings.yml file, then set the following
  # values there.

  secret_key: "ultrasecretkey"  # change this!
  # Proxying image results through searx
  image_proxy: true
  # 1.0 and 1.1 are supported
  http_protocol_version: "1.0"
  # POST queries are more secure as they don't show up in history but may cause
  # problems when using Firefox containers
  method: "GET"
  default_http_headers:
    X-Content-Type-Options: nosniff
    X-XSS-Protection: 1; mode=block
    X-Download-Options: noopen
    X-Robots-Tag: noindex, nofollow
    Referrer-Policy: no-referrer

redis:
  url: redis://127.0.0.1:6379/0

ui:
  # Custom static path - leave it blank if you didn't change
  static_path: ""
  static_use_hash: true
  # Custom templates path - leave it blank if you didn't change
  templates_path: ""
  # query_in_title: When true, the result page's titles contains the query
  # it decreases the privacy, since the browser can records the page titles.
  query_in_title: true
  # infinite_scroll: When true, automatically loads the next page when scrolling to bottom of the current page.
  infinite_scroll: false
  # ui theme
  default_theme: simple
  # center the results ?
  center_alignment: false
  # URL prefix of the internet archive, don't forgett trailing slash (if needed).
  # cache_url: "https://webcache.googleusercontent.com/search?q=cache:"
  # Default interface locale - leave blank to detect from browser information or
  # use codes from the 'locales' config section
  default_locale: ""
  # Open result links in a new tab by default
  # results_on_new_tab: false
  theme_args:
    # style of simple theme: auto, light, dark
    simple_style: auto

# Lock arbitrary settings on the preferences page.  To find the ID of the user
# setting you want to lock, check the ID of the form on the page "preferences".
#
# preferences:
#   lock:
#     - language
#     - autocomplete
#     - method
#     - query_in_title

# searx supports result proxification using an external service:
# https://github.com/asciimoo/morty uncomment below section if you have running
# morty proxy the key is base64 encoded (keep the !!binary notation)
# Note: since commit af77ec3, morty accepts a base64 encoded key.
#
# result_proxy:
#   url: http://127.0.0.1:3000/
#   # the key is a base64 encoded string, the YAML !!binary prefix is optional
#   key: !!binary "your_morty_proxy_key"
#   # [true|false] enable the "proxy" button next to each result
#   proxify_results: true

# communication with search engines
#
outgoing:
  # default timeout in seconds, can be override by engine
  request_timeout: 3.0
  # the maximum timeout in seconds
  # max_request_timeout: 10.0
  # suffix of searx_useragent, could contain information like an email address
  # to the administrator
  useragent_suffix: ""
  # The maximum number of concurrent connections that may be established.
  pool_connections: 100
  # Allow the connection pool to maintain keep-alive connections below this
  # point.
  pool_maxsize: 20
  # See https://www.python-httpx.org/http2/
  enable_http2: true
  using_tor_proxy: false


# External plugin configuration, for more details see
#   https://docs.searxng.org/dev/plugins.html
#
# plugins:
#   - plugin1
#   - plugin2
#   - ...


checker:
  # disable checker when in debug mode
  off_when_debug: true

  # use "scheduling: false" to disable scheduling
  # scheduling: interval or int

  # to activate the scheduler:
  # * uncomment "scheduling" section
  # * add "cache2 = name=searxngcache,items=2000,blocks=2000,blocksize=4096,bitmap=1"
  #   to your uwsgi.ini

  # scheduling:
  #   start_after: [300, 1800]  # delay to start the first run of the checker
  #   every: [86400, 90000]     # how often the checker runs

  # additional tests: only for the YAML anchors (see the engines section)
  #
  additional_tests:
    rosebud: &test_rosebud
      matrix:
        query: rosebud
        lang: en
      result_container:
        - not_empty
        - ['one_title_contains', 'citizen kane']
      test:
        - unique_results

    android: &test_android
      matrix:
        query: ['android']
        lang: ['en', 'de', 'fr', 'zh-CN']
      result_container:
        - not_empty
        - ['one_title_contains', 'google']
      test:
        - unique_results

  # tests: only for the YAML anchors (see the engines section)
  tests:
    infobox: &tests_infobox
      infobox:
        matrix:
          query: ["linux", "new york", "bbc"]
        result_container:
          - has_infobox

categories_as_tabs:
  general:
  images:
  videos:
  news:
  it:

engines:
  - name: arch linux wiki
    engine: archlinux
    shortcut: al

  - name: wikipedia
    engine: wikipedia
    shortcut: wp
    base_url: 'https://{language}.wikipedia.org/'

  - name: bing
    engine: bing
    shortcut: bi
    disabled: true

  - name: bing images
    engine: bing_images
    shortcut: bii

  - name: bing news
    engine: bing_news
    shortcut: bin

  - name: bing videos
    engine: bing_videos
    shortcut: biv

  - name: currency
    engine: currency_convert
    categories: general
    shortcut: cc
    disabled: false

  - name: ddg definitions
    engine: duckduckgo_definitions
    shortcut: ddd
    weight: 2
    disabled: true
    tests: *tests_infobox

  - name: docker hub
    engine: docker_hub
    shortcut: dh
    categories: [it, packages]
    disabled: false

  # - name: elasticsearch
  #   shortcut: es
  #   engine: elasticsearch
  #   base_url: http://localhost:9200
  #   username: elastic
  #   password: changeme
  #   index: my-index
  #   # available options: match, simple_query_string, term, terms, custom
  #   query_type: match
  #   # if query_type is set to custom, provide your query here
  #   #custom_query_json: {"query":{"match_all": {}}}
  #   #show_metadata: false
  #   disabled: true
  
  - name: wikidata
    engine: wikidata
    shortcut: wd
    timeout: 3.0
    weight: 2
    disabled: true
    tests: *tests_infobox

  - name: duckduckgo
    engine: duckduckgo
    shortcut: ddg
    disabled: false

  - name: gentoo
    engine: gentoo
    shortcut: ge

  - name: gitlab
    engine: json_engine
    paging: true
    search_url: https://gitlab.com/api/v4/projects?search={query}&page={pageno}
    url_query: web_url
    title_query: name_with_namespace
    content_query: description
    page_size: 20
    categories: [it, repos]
    shortcut: gl
    timeout: 10.0
    disabled: true
    about:
      website: https://about.gitlab.com/
      wikidata_id: Q16639197
      official_api_documentation: https://docs.gitlab.com/ee/api/
      use_official_api: false
      require_api_key: false
      results: JSON

  - name: github
    engine: github
    shortcut: gh

  - name: google
    engine: google
    shortcut: go
    # see https://docs.searxng.org/src/searx.engines.google.html#module-searx.engines.google
    use_mobile_ui: true
    weigth: 2
    # additional_tests:
    #   android: *test_android

  # - name: google italian
  #   engine: google
  #   shortcut: goit
  #   use_mobile_ui: false
  #   language: it

  # - name: google mobile ui
  #   engine: google
  #   shortcut: gomui
  #   use_mobile_ui: true

  - name: google images
    engine: google_images
    shortcut: goi
    # additional_tests:
    #   android: *test_android
    #   dali:
    #     matrix:
    #       query: ['Dali Christ']
    #       lang: ['en', 'de', 'fr', 'zh-CN']
    #     result_container:
    #       - ['one_title_contains', 'Salvador']

  - name: google news
    engine: google_news
    shortcut: gon
    # additional_tests:
    #   android: *test_android

  - name: google videos
    engine: google_videos
    shortcut: gov
    # additional_tests:
    #   android: *test_android

  - name: google scholar
    engine: google_scholar
    shortcut: gos



  - name: neeva
    engine: xpath
    send_accept_language_header: true
    shortcut: nv
    weigth: 3
    time_range_support: true
    time_range_url: '&alf%5Bfreshness%5D={time_range_val}'
    time_range_map:
      day: 'Day'
      week: 'Week'
      month: 'Month'
      year: 'Year'
    search_url: https://neeva.com/search?q={query}&c=All&src=Pagination&page={pageno}{time_range}
    results_xpath: //div[@class="web-index__component-2rKiM"] | //li[@class="web-rich-deep-links__deepLink-SIbD4"]
    url_xpath: .//a[@class="lib-doc-title__link-1b9rC"]/@href | ./h2/a/@href
    title_xpath: .//a[@class="lib-doc-title__link-1b9rC"] | ./h2/a
    content_xpath: >
      .//div[@class="lib-doc-snippet__component-3ewW6"]/text() |
      .//div[@class="lib-doc-snippet__component-3ewW6"]/*[not(self::a)] |
      ./p
    content_html_to_text: true
    suggestion_xpath: //span[@class="result-related-searches__link-2ho_u"]
    paging: true
    disabled: false
    categories: [general, web]
    timeout: 5.0
    soft_max_redirects: 2
    about:
      website: https://neeva.com
      official_api_documentation:
      use_official_api: false
      require_api_key: false
      results: HTML


  - name: stackoverflow
    engine: stackexchange
    shortcut: st
    api_site: 'stackoverflow'
    categories: [it, q&a]

  - name: askubuntu
    engine: stackexchange
    shortcut: ubuntu
    api_site: 'askubuntu'
    categories: [it, q&a]

  - name: superuser
    engine: stackexchange
    shortcut: su
    api_site: 'superuser'
    categories: [it, q&a]


  # - name: solr
  #   engine: solr
  #   shortcut: slr
  #   base_url: http://localhost:8983
  #   collection: collection_name
  #   sort: '' # sorting: asc or desc
  #   field_list: '' # comma separated list of field names to display on the UI
  #   default_fields: '' # default field to query
  #   query_fields: '' # query fields
  #   enable_http: true

  - name: startpage
    engine: startpage
    shortcut: sp
    timeout: 3.0
    disabled: true
    additional_tests:
      rosebud: *test_rosebud

  # For this demo of the sqlite engine download:
  #   https://liste.mediathekview.de/filmliste-v2.db.bz2
  # and unpack into searx/data/filmliste-v2.db
  # Query to test: "!demo concert"
  #
  # - name: demo
  #   engine: sqlite
  #   shortcut: demo
  #   categories: general
  #   result_template: default.html
  #   database: searx/data/filmliste-v2.db
  #   query_str:  >-
  #     SELECT title || ' (' || time(duration, 'unixepoch') || ')' AS title,
  #            COALESCE( NULLIF(url_video_hd,''), NULLIF(url_video_sd,''), url_video) AS url,
  #            description AS content
  #       FROM film
  #      WHERE title LIKE :wildcard OR description LIKE :wildcard
  #      ORDER BY duration DESC
  #   disabled: false

  # torznab engine lets you query any torznab compatible indexer.  Using this
  # engine in combination with Jackett (https://github.com/Jackett/Jackett)
  # opens the possibility to query a lot of public and private indexers directly
  # from SearXNG.
  # - name: torznab
  #   engine: torznab
  #   shortcut: trz
  #   base_url: http://localhost:9117/api/v2.0/indexers/all/results/torznab
  #   enable_http: true  # if using localhost
  #   api_key: xxxxxxxxxxxxxxx
  #   # https://github.com/Jackett/Jackett/wiki/Jackett-Categories
  #   torznab_categories:  # optional
  #     - 2000
  #     - 5000

  # maybe in a fun category
  #  - name: uncyclopedia
  #    engine: mediawiki
  #    shortcut: unc
  #    base_url: https://uncyclopedia.wikia.com/
  #    number_of_results: 5

  # tmp suspended - too slow, too many errors
  #  - name: urbandictionary
  #    engine      : xpath
  #    search_url  : https://www.urbandictionary.com/define.php?term={query}
  #    url_xpath   : //*[@class="word"]/@href
  #    title_xpath : //*[@class="def-header"]
  #    content_xpath: //*[@class="meaning"]
  #    shortcut: ud

  - name: yahoo news
    engine: yahoo_news
    shortcut: yhn

  - name: youtube
    shortcut: yt
    # You can use the engine using the official stable API, but you need an API
    # key See: https://console.developers.google.com/project
    #
    # engine: youtube_api
    # api_key: 'apikey' # required!
    #
    # Or you can use the html non-stable engine, activated by default
    engine: youtube_noapi

  # - name: yacy
  #   engine: yacy
  #   shortcut: ya
  #   base_url: http://localhost:8090
  # required if you aren't using HTTPS for your local yacy instance'
  #   enable_http: true
  #   number_of_results: 5
  #   timeout: 3.0

  - name: goo
    shortcut: goo
    engine: xpath
    weigth: 3
    paging: true
    search_url: https://search.goo.ne.jp/web.jsp?MT={query}&FR={pageno}0
    url_xpath: //div[@class="result"]/p[@class='title fsL1']/a/@href
    title_xpath: //div[@class="result"]/p[@class='title fsL1']/a
    content_xpath: //p[contains(@class,'url fsM')]/following-sibling::p
    first_page_num: 0
    categories: [general, web]
    timeout: 4.0
    disabled: false
    about:
      website: https://search.goo.ne.jp
      use_official_api: false
      require_api_key: false
      results: HTML
      language: ja

doi_resolvers:
  oadoi.org: 'https://oadoi.org/'
  doi.org: 'https://doi.org/'
  doai.io: 'https://dissem.in/'
  sci-hub.se: 'https://sci-hub.se/'
  sci-hub.st: 'https://sci-hub.st/'
  sci-hub.ru: 'https://sci-hub.ru/'

default_doi_resolver: 'oadoi.org'
